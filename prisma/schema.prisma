// to enable search previewFeatures = ["fullTextSearch", "fullTextIndex"] is added

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]
}

model Companion {
  id           String    @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String
  description  String
  instructions String
  seed         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  messages     Message[]

  @@index([categoryId])
  @@index([name])
}

enum Role {
  user
  system
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  companionId String
  userId      String
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
}

// New Database Object for Discord-Clone

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servers   Server[]
  members   Member[]
  channels  Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String    @unique
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    Member[]
  channels   Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Member {
  id                     String           @id @default(uuid())
  role                   MemberRole       @default(GUEST)
  profileId              String
  profile                Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  channelMessages        ChannelMessage[]
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]   @relation("MemberOne")
  conversationsReceived  Conversation[]   @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id              String           @id @default(uuid())
  name            String
  type            ChannelType      @default(TEXT)
  profileId       String
  profile         Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId        String
  server          Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channelMessages ChannelMessage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model ChannelMessage {
  id        String   @id @default(uuid())
  content   String
  fileUrl   String?
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id            String          @id @default(uuid())
  memberOneId   String
  memberOne     Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId   String
  memberTwo     Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessage DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
